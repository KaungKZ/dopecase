// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

enum PhoneModel {
  iPhone12
  iPhone12pro
  iPhone12promax
  iPhone13
  iPhone13pro
  iPhone13promax
  iPhone14pro
  iPhone14
  iPhone14promax
  iPhone15
  iPhone15pro
  iPhone15promax
}

enum CaseMaterial {
  silicone
  polycarbonate
}

enum CaseFinish {
  smooth
  textured
}

enum CaseColor {
  black
  blue
  rose
}


model User {
  id                 String  @id @default(cuid())
  username          String? @unique
  name          String?
  email         String?   @unique
  emailVerified Boolean? 
  role          String?
  isEmailVerified         Boolean?
  image         String?
  password              String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}


model Account {
id                 String  @id @default(cuid())
  userId             String   
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
 id                 String  @id @default(cuid())
  sessionToken String   @unique 
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}


model ImageConfiguration {
  id        String @id @default(cuid())
  width     Int
  height    Int
  imageUrl    String
  croppedImageUrl String?
  totalPrice      Float?
  color           CaseColor?
  model           PhoneModel?
  material        CaseMaterial?
  finish          CaseFinish?
  Order           Order[]
}

model Order {
  id              String        @id @default(cuid())
  configurationId String
  configuration   ImageConfiguration @relation(fields: [configurationId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  totalPrice          Float
  isPaid          Boolean       @default(false)
  status          OrderStatus   @default(awaiting_shipment)

  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId  String?

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model BillingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}



